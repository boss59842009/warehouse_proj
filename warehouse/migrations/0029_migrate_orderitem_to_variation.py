# Generated by Django 5.1.7 on 2025-05-07 19:58

from django.db import migrations

def migrate_product_to_variation(apps, schema_editor):
    OrderItem = apps.get_model('warehouse', 'OrderItem')
    ProductVariation = apps.get_model('warehouse', 'ProductVariation')
    Product = apps.get_model('warehouse', 'Product')
    
    # For each OrderItem, find or create a corresponding ProductVariation
    for order_item in OrderItem.objects.all():
        # Get the product instance
        product = Product.objects.get(id=order_item.product.id)
        
        # Try to find an existing variation for this product
        variation = ProductVariation.objects.filter(
            parent_product_id=product.id,
            name=product.name
        ).first()
        
        if variation:
            # Update the OrderItem to use the variation
            order_item.product_variation = variation
            order_item.save()

def reverse_migrate(apps, schema_editor):
    OrderItem = apps.get_model('warehouse', 'OrderItem')
    for order_item in OrderItem.objects.all():
        if order_item.product_variation:
            order_item.product_id = order_item.product_variation.parent_product_id
            order_item.save()

class Migration(migrations.Migration):
    dependencies = [
        ('warehouse', '0028_delete_productinventory_alter_inventoryitem_options'),
    ]

    operations = [
        migrations.RunPython(migrate_product_to_variation, reverse_migrate),
    ]
